* Search
** Linear Search
	 - simplest form of search: O(n)
	 - walk over an array and check if `i_val == val`

	 @code typescript
function linear_fn(haystack: number[], needle: number): boolean {
    for (let i = 0; i < haystack.length; ++i) {
        if (haystack[i] == needle) {
            return true;
        }
    }
    return false;
	@end

** Binary Search
	 - requires that the array is *sorted*
	 - halve the array each step: O(logn)

	 @code typescript
function binary_fn(haystack: number[], needle: number): boolean {
    let lo = 0;
    let hi = haystack.length;

    do {
        const m = Math.floor(lo + (hi - lo) / 2);
        const v = haystack[m];
        if (v == needle) {
            return true;
        }
        if (v > needle) {
            hi = m;
        } else {
            lo = m + 1;
        }
    } while (lo < hi);

    return false;
}
	 @end

** Crystal Ball Challenge
	 - requires that we jump square root of n: 0(n^1/2)
	 - makes it so that we do not need to search in linear time

	 @code typescript
function two_crystal_balls(breaks: boolean[]): number {
    const jumpAmount = Math.floor(Math.sqrt(breaks.length));

    let lastJump = 0;
    let currentIndex = jumpAmount;

    do {
        if (breaks[currentIndex] === true) {
            // walk square root of n until we break
            for (let i = lastJump + 1; i <= currentIndex; i++) {
                if (breaks[i] == true) {
                    return i;
                }
            }
        } else {
            lastJump = currentIndex;
            currentIndex += jumpAmount;
        }
    } while (currentIndex < breaks.length);

    return -1;
	 @end
